<?php
use App\Bruker\FlexArchive;
use App\Utils\Crypto;
use App\Utils\DB;
use App\Utils\Response;
use App\Utils\Session;
use App\Utils\Storage;

Session::requireAuth();
$accountId = Session::getAccountId();

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Finish processing upload even if client disconnects
    ignore_user_abort(true);
    set_time_limit(60*3);

    // Get temporary path to uploaded file
    $file = $_FILES['samples'] ?? null;
    if ($file === null || $file['error'] !== UPLOAD_ERR_OK) {
        Response::json([
            'success' => false,
            'error' => 'Invalid uploaded file',
        ], 400);
    }
    $tmpPath = $file['tmp_name'];

    // Try to open ZIP archive
    try {
        $archive = new FlexArchive($tmpPath);
    } catch (RuntimeException $e) {
        Response::json([
            'success' => false,
            'error' => 'Failed to read uploaded file',
        ], 400);
    }

    // Extract samples
    $validSamplesCount = 0;
    $duplicateSamplesCount = 0;
    $errors = [];
    $batchId = Crypto::getRandomString(16);
    foreach ($archive->getSamples() as $sample) {
        $basePath = $sample->getBasePath();
        try {
            $sample->validate();

            // Persist sample file and metadata
            $digest = $sample->getDigest();
            $destPath = Storage::getPathToSample($digest);
            if (!is_file($destPath)) {
                $destDirname = dirname($destPath);
                if (!is_dir($destDirname)) {
                    mkdir($destDirname, 0777, true);
                }
                $sample->export($destPath);
                $filesize = filesize($destPath);
                DB::query(
                    'INSERT INTO samples (digest, sample_id, target_id, position, spectrum_size,
                       instrument_serial_number, instrument_type, digitizer_type, flexcontrol_version, aida_version,
                       size, acquired_at, calibrated_at)
                     VALUES (x?s, x?s, x?s, ?s, ?i, ?s, ?i, ?i, ?s, ?s, ?i, ?s, ?s)
                     ON DUPLICATE KEY UPDATE
                       sample_id=VALUES(sample_id),
                       target_id=VALUES(target_id),
                       position=VALUES(position),
                       spectrum_size=VALUES(spectrum_size),
                       instrument_serial_number=VALUES(instrument_serial_number),
                       instrument_type=VALUES(instrument_type),
                       digitizer_type=VALUES(digitizer_type),
                       flexcontrol_version=VALUES(flexcontrol_version),
                       aida_version=VALUES(aida_version),
                       size=VALUES(size),
                       acquired_at=VALUES(acquired_at),
                       calibrated_at=VALUES(calibrated_at)',
                    $digest,
                    $sample->getSampleId(),
                    $sample->getTargetId(),
                    $sample->getPosition(),
                    $sample->getSpectrumSize(),
                    $sample->getInstrumentSerialNumber(),
                    $sample->getInstrumentType(),
                    $sample->getDigitizerType(),
                    $sample->getFlexControlVersion(),
                    $sample->getAidaVersion(),
                    $filesize,
                    $sample->getAcquisitionDate()->setTimezone(new DateTimeZone('UTC'))->format('Y-m-d H:i:s.u'),
                    $sample->getCalibrationDate()->setTimezone(new DateTimeZone('UTC'))->format('Y-m-d H:i:s.u')
                );
            }

            // Find best default name for upload
            $name = empty($basePath) ? $sample->getOriginalPath() : $basePath;
            $name = preg_replace('/\/0_[A-Z][0-9]+\/([0-9]+)\/1SLin$/', '#$1', $name); // Trim "0_A1/1/1SLin"
            $name = explode('/', $name);
            if (mb_strlen(end($name)) >= 5) {
                $name = end($name);
            } else {
                $name = implode('/', array_slice($name, -2)); // Too short, keep 2 parts
            }
            $name = preg_replace('/#1$/', '', $name); // Trim "#1" (only keep "#2", "#3", etc.)
            $name = mb_substr($name, 0, UPLOAD_NAME_MAX_LENGTH);

            // Persist upload metadata
            $uploadId = Crypto::getRandomString(16);
            $insertedRows = DB::query(
                'INSERT INTO uploads (id, batch_id, account, sample, name, uploaded_at)
                 VALUES (?s, ?s, ?i, x?s, ?s, ?s)
                 ON DUPLICATE KEY UPDATE id=id',
                $uploadId,
                $batchId,
                $accountId,
                $digest,
                $name,
                gmdate('Y-m-d H:i:s')
            )->rowCount();
            if ($insertedRows == 1) {
                $validSamplesCount++;
            } else {
                $duplicateSamplesCount++;
            }
        } catch (RuntimeException $e) {
            $errors[$basePath] = $e->getMessage();
        }
    }

    // Build response
    $report = '';
    $errorsCount = count($errors);
    if ($validSamplesCount > 0) {
        $message = ($validSamplesCount == 1) ?
            'Successfully imported 1 sample' :
            "Successfully imported $validSamplesCount samples";
        $report .= '<div class="alert alert-success"><i class="bi bi-check-square-fill"></i> ' . $message . '</div>';
    }
    if ($duplicateSamplesCount > 0) {
        $message = ($duplicateSamplesCount == 1) ?
            'Skipped 1 duplicate sample' :
            "Skipped $duplicateSamplesCount duplicate samples";
        $report .= '<div class="alert alert-info"><i class="bi bi-info-square-fill"></i> ' . $message . '</div>';
    }
    foreach (array_slice($errors, 0, UPLOAD_MAX_ERRORS, true) as $basePath=>$errorMessage) {
        $message = sprintf('Skipped "%s"', $basePath);
        $report .= '<div class="alert alert-danger">' .
                '<i class="bi bi-exclamation-octagon-fill"></i> ' . $this->e($message) . ' â€“ ' .
                '<em>' . $this->e($errorMessage) . '</em>' .
            '</div>';
    }
    if ($errorsCount > UPLOAD_MAX_ERRORS) {
        $remainingErrors = $errorsCount - UPLOAD_MAX_ERRORS;
        $message = ($remainingErrors == 1) ?
            '1 more error was omitted' :
            "$remainingErrors more errors were omitted";
        $report .= '<p class="my-2 small font-italic">' . $message . '</p>';
    }
    if ($validSamplesCount+$duplicateSamplesCount+$errorsCount < 1) {
        $message = 'No samples were detected';
        $report .= '<div class="alert alert-warning"><i class="bi bi-exclamation-triangle-fill"></i> ' . $message . '</div>';
    }
    Response::json([
        'success' => true,
        'report' => $report,
    ]);
}
?>

<?php $this->layout('base', ['title' => 'Upload samples']) ?>

<div class="container">
    <div class="row">
        <div class="col-lg-9">
            <div class="upload-area my-3 text-muted">
                <div class="feedback feedback-initial">
                    <div class="icon"><i class="bi bi-upload"></i></div>
                    <p class="heading">Drag and drop your samples or click to <span class="text-primary">open a browse dialog</span></p>
                </div>
                <div class="feedback feedback-error text-danger d-none">
                    <div class="icon"><i class="bi bi-exclamation-diamond"></i></div>
                    <p class="heading"></p>
                    <button type="button" class="btn btn-sm btn-outline-secondary">Try again</button>
                </div>
                <div class="feedback feedback-uploading d-none">
                    <p class="heading"></p>
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"></div>
                    </div>
                </div>
                <div class="feedback feedback-done d-none">
                    <div class="icon"><i class="bi bi-archive"></i></div>
                    <p class="heading">Upload completed</p>
                    <div class="report my-4"></div>
                    <p class="my-2">
                        <a href="/results" class="btn btn-sm btn-primary">Go to results</a>
                        <a href="/upload" class="btn btn-sm btn-outline-secondary">Upload more samples</a>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-lg-3">
            <h5 class="my-3">Tips for uploading samples</h5>
            <div class="upload-tip">
                <div class="bullet text-success"><i class="bi bi-check-circle-fill"></i></div>
                <div class="text">Upload MALDI-TOF samples acquired with Bruker Daltonics Flex machines.</div>
            </div>
            <div class="upload-tip">
                <div class="bullet text-success"><i class="bi bi-check-circle-fill"></i></div>
                <div class="text">Create a ZIP archive or drag and drop a folder directly up to <?= ini_get('post_max_size') ?>B in size.</div>
            </div>
            <div class="upload-tip">
                <div class="bullet text-success"><i class="bi bi-check-circle-fill"></i></div>
                <div class="text">The upload can contain multiple samples, each in their own directory.</div>
            </div>
            <div class="upload-tip">
                <div class="bullet text-danger"><i class="bi bi-x-circle-fill"></i></div>
                <div class="text">Refrain from uploading more than 1k samples at once.</div>
            </div>
            <div class="my-3 text-muted small">
                Still unsure what to upload? <a href="/sample-maldi-tof.zip">Click here</a> to download a valid sample to see its structure.
            </div>
        </div>
    </div>
</div>

<?php $this->push('scripts') ?>
    <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
<?php $this->end() ?>
